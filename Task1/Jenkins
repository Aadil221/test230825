pipeline {
    agent any
    
    environment {
        DOCKER_NETWORK = 'flask_network'
    }
    
    stages {
        stage('Cleanup') {
            steps {
                sh '''
                    echo "Cleaning up old containers and networks..."
                    docker rm -f flask-app nginx-proxy || true
                    docker network rm flask_network || true
                    sleep 2
                '''
            }
        }

        stage('Build Flask Docker Image') {
            steps {
                dir('Task1') {
                    sh '''
                        echo "Building Flask application..."
                        docker build -t flask-app .
                    '''
                }
            }
        }
        
        stage('Test Flask Image') {
            steps {
                sh '''
                    echo "Testing Flask image..."
                    docker run -d --name flask-test -p 5500:5500 flask-app
                    sleep 5
                    curl http://localhost:5500 || true
                    docker logs flask-test
                    docker rm -f flask-test
                '''
            }
        }
        
        stage('Create Network') {
            steps {
                sh '''
                    echo "Creating Docker network..."
                    docker network create flask_network
                    docker network ls
                '''
            }
        }
        
        stage('Deploy Flask App') {
            steps {
                sh '''
                    echo "Deploying Flask application..."
                    docker run -d --name flask-app \
                        --network flask_network \
                        -p 5500:5500 \
                        -e YOUR_NAME=Sahr \
                        flask-app
                    
                    echo "Waiting for Flask app to start..."
                    sleep 10
                    
                    echo "Testing Flask app directly..."
                    curl http://localhost:5500 || true
                    
                    echo "Flask app logs:"
                    docker logs flask-app
                '''
            }
        }
        
        stage('Deploy NGINX Proxy') {
            steps {
                dir('Task1') {
                    sh '''
                        echo "Deploying NGINX proxy..."
                        docker run -d --name nginx-proxy \
                            --network flask_network \
                            -p 80:80 \
                            -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf:ro \
                            nginx:latest
                        
                        echo "Waiting for NGINX to start..."
                        sleep 10
                        
                        echo "NGINX configuration:"
                        docker exec nginx-proxy nginx -t
                        
                        echo "NGINX logs:"
                        docker logs nginx-proxy
                    '''
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                sh '''
                    echo "Container status:"
                    docker ps
                    
                    echo "Network status:"
                    docker network inspect flask_network
                    
                    echo "Testing Flask app directly:"
                    curl http://localhost:5500
                    
                    echo "Testing through NGINX:"
                    curl http://localhost:80
                    
                    echo "Container logs:"
                    echo "Flask logs:"
                    docker logs flask-app
                    echo "NGINX logs:"
                    docker logs nginx-proxy
                '''
            }
        }
    }
    
    post {
        failure {
            sh '''
                echo "Deployment failed. Collecting diagnostics..."
                docker ps -a
                docker logs flask-app || true
                docker logs nginx-proxy || true
                docker network inspect flask_network || true
                netstat -tulpn | grep -E '80|5500' || true
            '''
        }
        always {
            cleanWs()
        }
    }
}
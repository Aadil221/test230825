pipeline {
    agent any
    
    environment {
        DOCKER_NETWORK = 'flask_network'
    }
    
    stages {
        stage('Cleanup') {
            steps {
                sh '''
                    docker rm -f flask-app nginx-proxy || true
                    docker network rm flask_network || true
                '''
            }
        }

        stage('Build Flask Docker Image') {
            steps {
                dir('Task1') {
                    sh '''
                        echo "Building Flask application..."
                        docker build -t flask-app .
                    '''
                }
            }
        }
        
        stage('Create Network') {
            steps {
                sh '''
                    echo "Creating Docker network..."
                    docker network create flask_network
                '''
            }
        }
        
        stage('Deploy Flask App') {
            steps {
                dir('Task1') {
                    sh '''
                        echo "Deploying Flask application..."
                        docker run -d --name flask-app \
                            --network flask_network \
                            -e YOUR_NAME=Sahr \
                            flask-app
                        
                        echo "Waiting for Flask app to start..."
                        sleep 5
                    '''
                }
            }
        }
        
        stage('Deploy NGINX Proxy') {
            steps {
                dir('Task1') {
                    sh '''
                        echo "Deploying NGINX proxy..."
                        docker run -d --name nginx-proxy \
                            --network flask_network \
                            -p 80:80 \
                            -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf:ro \
                            nginx:latest
                        
                        echo "Waiting for NGINX to start..."
                        sleep 5
                    '''
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                sh '''
                    echo "Verifying deployment..."
                    docker ps
                    echo "Testing application..."
                    curl -v localhost:80
                '''
            }
        }
    }
    
    post {
        always {
            sh '''
                echo "Flask app logs:"
                docker logs flask-app || true
                echo "NGINX logs:"
                docker logs nginx-proxy || true
            '''
            cleanWs()
        }
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
